diff --git c/src/runner_time_integration.c w/src/runner_time_integration.c
index fd0f0d10a..62354feb0 100644
--- c/src/runner_time_integration.c
+++ w/src/runner_time_integration.c
@@ -727,8 +727,6 @@ void runner_do_timestep(struct runner *r, struct cell *c, const int timer) {
           old_time_step_length = get_timestep(p->time_bin, e->time_base);
         }
 
-        /* Get new time-step */
-        integertime_t ti_rt_new_step = get_part_rt_timestep(p, xp, e);
         const integertime_t ti_new_step =
             get_part_timestep(p, xp, e, ti_rt_new_step);
         /* Enforce RT time-step size <= hydro step size. */
@@ -781,7 +779,11 @@ void runner_do_timestep(struct runner *r, struct cell *c, const int timer) {
 
         /* Same for RT */
         if (with_rt) {
+          /* Enforce RT time-step size <= hydro step size */
+          ti_rt_new_step = min(ti_new_step, ti_rt_new_step);
+
           p->rt_time_data.time_bin = get_time_bin(ti_rt_new_step);
+
           ti_rt_end_min =
               min(ti_current_subcycle + ti_rt_new_step, ti_rt_end_min);
           ti_rt_beg_max =
@@ -822,10 +824,11 @@ void runner_do_timestep(struct runner *r, struct cell *c, const int timer) {
 
             ti_rt_end_min = min(ti_rt_end, ti_rt_end_min);
             ti_rt_beg_max = max(ti_rt_beg, ti_rt_beg_max);
-
-            integertime_t ti_rt_step =
-                get_integer_timestep(p->rt_time_data.time_bin);
-            ti_rt_min_step_size = min(ti_rt_min_step_size, ti_rt_step);
+            /* We mustn't update ti_rt_min_step_size here, since the RT time
+             * step sizes don't change for particles when they are inactive.
+             * Leaving them here effectively prohibits them from ever increasing
+             * again. Instead, if we're working on a cell where each particle
+             * is inactive, do an appropriate check at the end. */
           }
 
           if (p->gpart != NULL) {
@@ -1563,16 +1566,9 @@ void runner_do_sync(struct runner *r, struct cell *c, int force,
         /* Finish this particle's time-step */
         timestep_process_sync_part(p, xp, e, cosmo);
 
-        /* Note that at this moment the new RT time step is only used to
-         * limit the hydro time step here. */
-        integertime_t ti_rt_new_step = get_part_rt_timestep(p, xp, e);
         /* Get new time-step */
-        integertime_t ti_new_step = get_part_timestep(p, xp, e, ti_rt_new_step);
+        integertime_t ti_new_step = get_part_timestep(p, xp, e);
         timebin_t new_time_bin = get_time_bin(ti_new_step);
-        /* Enforce RT time-step size <= hydro step size. */
-        /* On the commented out line below: We should be doing this once we
-         * correctly add RT to this part of the code. */
-        /* ti_rt_new_step = min(ti_new_step, ti_rt_new_step); */
 
         /* Apply the limiter if necessary */
         if (p->limiter_data.wakeup != time_bin_not_awake) {
diff --git c/src/timestep.h w/src/timestep.h
index c09895bac..fef1340a4 100644
--- c/src/timestep.h
+++ w/src/timestep.h
@@ -137,11 +137,10 @@ __attribute__((always_inline)) INLINE static integertime_t get_gpart_timestep(
  * @param p The #part.
  * @param xp The #xpart partner of p.
  * @param e The #engine (used to get some constants).
- * @param new_dti_rt The new radiation integer time step.
  */
 __attribute__((always_inline)) INLINE static integertime_t get_part_timestep(
     const struct part *restrict p, const struct xpart *restrict xp,
-    const struct engine *restrict e, const integertime_t new_dti_rt) {
+    const struct engine *restrict e) {
 
   /* Compute the next timestep (hydro condition) */
   const float new_dt_hydro =
@@ -183,9 +182,25 @@ __attribute__((always_inline)) INLINE static integertime_t get_part_timestep(
       chemistry_timestep(e->physical_constants, e->cosmology, e->internal_units,
                          e->hydro_properties, e->chemistry, p);
 
+  /* Get the RT timestep */
+  float new_dt_radiation = FLT_MAX;
+  if (e->policy & engine_policy_rt) {
+    new_dt_radiation = rt_compute_timestep(
+        p, xp, e->rt_props, e->cosmology, e->hydro_properties,
+        e->physical_constants, e->internal_units);
+    if (e->max_nr_rt_subcycles > 0 && new_dt_radiation != FLT_MAX) {
+      /* if max_nr_rt_subcycles == 0, we don't subcycle. */
+      /* ToDo: this is a temporary solution to enforce the exact
+       * number of RT subcycles. We multiply the new_dt_rad here by
+       * the number of subcycles, and don't when getting the
+       * actual RT time step. */
+      new_dt_radiation *= e->max_nr_rt_subcycles;
+    }
+  }
+
   /* Take the minimum of all */
   float new_dt = min3(new_dt_hydro, new_dt_cooling, new_dt_grav);
-  new_dt = min4(new_dt, new_dt_mhd, new_dt_chemistry, new_dt_forcing);
+  new_dt = min5(new_dt, new_dt_mhd, new_dt_chemistry, new_dt_radiation, new_dt_forcing);
 
   /* Limit change in smoothing length */
   const float dt_h_change =
@@ -209,7 +224,7 @@ __attribute__((always_inline)) INLINE static integertime_t get_part_timestep(
           new_dt, e->dt_min);
 
   /* Convert to integer time */
-  integertime_t new_dti = make_integer_timestep(
+  const integertime_t new_dti = make_integer_timestep(
       new_dt, p->time_bin, p->limiter_data.min_ngb_time_bin, e->ti_current,
       e->time_base_inv);
 
@@ -251,39 +266,14 @@ __attribute__((always_inline)) INLINE static integertime_t get_part_rt_timestep(
     const struct part *restrict p, const struct xpart *restrict xp,
     const struct engine *restrict e) {
 
-  if (!(e->policy & engine_policy_rt))
-    return get_integer_timestep(num_time_bins);
-
-  float new_dt =
-      rt_compute_timestep(p, xp, e->rt_props, e->cosmology, e->hydro_properties,
-                          e->physical_constants, e->internal_units);
-
-  if ((e->policy & engine_policy_cosmology))
-    error("Cosmology factor in get_part_rt_timestep not implemented yet");
-  /* Apply the maximal displacement constraint (FLT_MAX if non-cosmological)*/
-  /* new_dt = min(new_dt, e->dt_max_RMS_displacement); */
-
-  /* Apply cosmology correction (This is 1 if non-cosmological) */
-  /* new_dt *= e->cosmology->time_step_factor; */
-
-  /* Limit timestep within the allowed range */
-  new_dt = min(new_dt, e->dt_max);
-
-#ifdef SWIFT_RT_DEBUG_CHECKS
-  /* Proper error will be caught in get_part_timestep(), so keep this as
-   * debugging check only. */
-  const float f = (float)max(e->max_nr_rt_subcycles, 1);
-  if (new_dt < e->dt_min / f)
-    error(
-        "part (id=%lld) wants an RT time-step (%e) below dt_min/nr_subcycles "
-        "(%e)",
-        p->id, new_dt, e->dt_min / f);
-#endif
-
-  const integertime_t new_dti = make_integer_timestep(
-      new_dt, p->rt_time_data.time_bin, p->rt_time_data.min_ngb_time_bin,
-      e->ti_current, e->time_base_inv);
-
+  integertime_t new_dti;
+  /* TODO: for now, we abuse max_nr_rt_subcycles to fix the
+   * number of sub-cycles for each step. */
+  if (e->max_nr_rt_subcycles > 0) {
+    new_dti = get_part_timestep(p, xp, e) / e->max_nr_rt_subcycles;
+  } else {
+    new_dti = get_part_timestep(p, xp, e);
+  }
   return new_dti;
 }
 
