readCosmologicalRadiativeTransferComparisonProjectData
========================================================


About
----------------

Scripts to read in result data from the cosmological radiative code comparison 
projects (https://arxiv.org/abs/astro-ph/0603199, https://arxiv.org/abs/0905.2920)

They are publicly available on 
https://astronomy.sussex.ac.uk/~iti20/RT_comparison_project/index.html (state 22.08.2022). 
Detailed descriptions of the data is provided in
https://astronomy.sussex.ac.uk/~iti20/RT_comparison_project/files/RT_tests.pdf (state 22.08.2022).

The result files are all binary files, written in the "IFrIT" format.  (See
https://ascl.net/1304.019). 


Usage
---------------

Each test may contain different variables written out, so each set gets their own 
executable which can be compiled individually. You can compile them all together 
or individually using the provided Makefile.

Typically each executable will take the result binary file as a cmdline arg,
read it in, and extract the profiles of the relevant data. The profiles are set
up to be spherically averaged histograms over 128 cells that were used in the
tests. (Alternatively, functions are provided to print out entire 2D slices.)

The results file will be 128 lines long: One for each histogram bin. These bins 
cover the range of the boxsize for each test. You'll need to check for each test 
individually what the actual boxsize of the test is if you want to use physical
data for your plots.

Each line will contain two comma separated values: The mean value of the bin, and
the standard deviation.

Two simple python scripts to plot results (slices, profiles) are provided.



Notes
---------------


Following the source code (`frit-4.1.2/docs/writeIFrIT.[cf]`), apparently the 
files have been written using

```
    int WriteIFrITUniformScalarsBinFile(
        int n1, int n2, int n3, /* Size of the computational mesh in 3 directions */
        float *var1, float *var2, float *var3, /* Three scalar variables */
        char *filename) /* Name of the file */
    {
       int ntemp; FILE *F; /* ntemp should be declared long on a 16-bit machine */
       F = fopen(filename,"wb"); if(F == NULL) return 1;
       ntemp = 12;
       fwrite(&ntemp,4,1,F);
       fwrite(&n1,4,1,F);
       fwrite(&n2,4,1,F);
       fwrite(&n3,4,1,F);
       fwrite(&ntemp,4,1,F);
       ntemp = 4*n1*n2*n3;
       fwrite(&ntemp,4,1,F); fwrite(var1,4,n1*n2*n3,F); fwrite(&ntemp,4,1,F);
       fwrite(&ntemp,4,1,F); fwrite(var2,4,n1*n2*n3,F); fwrite(&ntemp,4,1,F);
       fwrite(&ntemp,4,1,F); fwrite(var3,4,n1*n2*n3,F); fwrite(&ntemp,4,1,F);
       fclose(F);
       return 0;
    }
```

or  in Fortran:

```
C
C  Write to binary uniform scalars data file
C
      subroutine WriteIFrITUniformScalarsBinFile(n1,n2,n3,var1,var2,var3,
     .     filename)
      integer n1, n2, n3  ! Size of the computational mesh in 3 directions
      real*4 var1(n1,n2,n3)
      real*4 var2(n1,n2,n3) ! Three scalar variables
      real*4 var3(n1,n2,n3)
      character*(*) filename  ! Name of the file
      open(unit=1, file=filename, form='unformatted')
      write(1) n1, n2, n3
      write(1) (((var1(i,j,k),i=1,n1),j=1,n2),k=1,n3)
      write(1) (((var2(i,j,k),i=1,n1),j=1,n2),k=1,n3)
      write(1) (((var3(i,j,k),i=1,n1),j=1,n2),k=1,n3)
      close(1)
      return
      end
```

